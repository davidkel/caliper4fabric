#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

version: '3'

volumes:
    prometheus_data: {}

services:

#######
# CAs #
#######

    ca.org1.example.com:
        image: hyperledger/fabric-ca:1.5.3
        environment:
        - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
        - FABRIC_CA_SERVER_CA_NAME=ca.org1.example.com
        - FABRIC_CA_SERVER_CA_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca.org1.example.com-cert.pem
        - FABRIC_CA_SERVER_CA_KEYFILE=/etc/hyperledger/fabric-ca-server-config/key.pem
        # TLS
        - FABRIC_CA_SERVER_TLS_ENABLED=true
        - FABRIC_CA_SERVER_TLS_CERTFILE=/etc/hyperledger/fabric-ca-server-tls/tlsca.org1.example.com-cert.pem
        - FABRIC_CA_SERVER_TLS_KEYFILE=/etc/hyperledger/fabric-ca-server-tls/key.pem
        ports:
        - "7054:7054"
        command: sh -c 'fabric-ca-server start -b admin:adminpw -d'
        volumes:
        - ./config/crypto-config/peerOrganizations/org1.example.com/ca/:/etc/hyperledger/fabric-ca-server-config
        - ./config/crypto-config/peerOrganizations/org1.example.com/tlsca/:/etc/hyperledger/fabric-ca-server-tls
        container_name: ca.org1.example.com


    ca.org2.example.com:
        image: hyperledger/fabric-ca:1.5.3
        environment:
        - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
        - FABRIC_CA_SERVER_CA_NAME=ca.org2.example.com
        - FABRIC_CA_SERVER_CA_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca.org2.example.com-cert.pem
        - FABRIC_CA_SERVER_CA_KEYFILE=/etc/hyperledger/fabric-ca-server-config/key.pem
        # TLS
        - FABRIC_CA_SERVER_TLS_ENABLED=true
        - FABRIC_CA_SERVER_TLS_CERTFILE=/etc/hyperledger/fabric-ca-server-tls/tlsca.org2.example.com-cert.pem
        - FABRIC_CA_SERVER_TLS_KEYFILE=/etc/hyperledger/fabric-ca-server-tls/key.pem
        ports:
        - "8054:7054"
        command: sh -c 'fabric-ca-server start -b admin:adminpw -d'
        volumes:
        - ./config/crypto-config/peerOrganizations/org2.example.com/ca/:/etc/hyperledger/fabric-ca-server-config
        - ./config/crypto-config/peerOrganizations/org2.example.com/tlsca/:/etc/hyperledger/fabric-ca-server-tls
        container_name: ca.org2.example.com

############
# ORDERERS #
############

    orderer0.example.com:
        container_name: orderer0.example.com
        image: hyperledger/fabric-orderer:2.4.3
        environment:
        - FABRIC_LOGGING_SPEC=info
        - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
        - ORDERER_GENERAL_GENESISMETHOD=file
        - ORDERER_GENERAL_GENESISFILE=/etc/hyperledger/configtx/genesis.block
        - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
        - ORDERER_GENERAL_LOCALMSPDIR=/etc/hyperledger/msp/orderer/msp
        # TLS
        - ORDERER_GENERAL_TLS_ENABLED=true
        - ORDERER_GENERAL_TLS_PRIVATEKEY=/etc/hyperledger/msp/orderer/tls/server.key
        - ORDERER_GENERAL_TLS_CERTIFICATE=/etc/hyperledger/msp/orderer/tls/server.crt
        - ORDERER_GENERAL_TLS_ROOTCAS=[/etc/hyperledger/msp/orderer/tls/ca.crt]
        # Raft TLS
        - ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE=/etc/hyperledger/msp/orderer/tls/server.crt
        - ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY=/etc/hyperledger/msp/orderer/tls/server.key
        # setting up metrics
        - ORDERER_OPERATIONS_LISTENADDRESS=0.0.0.0:9000
        - ORDERER_OPERATIONS_TLS_ENABLED=false
        - ORDERER_METRICS_ENABLE=true
        - ORDERER_METRICS_PROVIDER=prometheus
        working_dir: /opt/gopath/src/github.com/hyperledger/fabric
        command: orderer
        ports:
        - 7050:7050
        volumes:
        - ./config/:/etc/hyperledger/configtx
        - ./config/crypto-config/ordererOrganizations/example.com/orderers/orderer0.example.com/:/etc/hyperledger/msp/orderer
        - ./config/crypto-config/peerOrganizations/org1.example.com/ca/:/etc/hyperledger/msp/caOrg1
        - ./config/crypto-config/peerOrganizations/org2.example.com/ca/:/etc/hyperledger/msp/caOrg2
        - ./config/crypto-config/ordererOrganizations/example.com/ca/:/etc/hyperledger/msp/caOrderer
        depends_on:
        - ca.org1.example.com
        - ca.org2.example.com

    orderer1.example.com:
        container_name: orderer1.example.com
        image: hyperledger/fabric-orderer:2.4.3
        environment:
        - FABRIC_LOGGING_SPEC=info
        - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
        - ORDERER_GENERAL_GENESISMETHOD=file
        - ORDERER_GENERAL_GENESISFILE=/etc/hyperledger/configtx/genesis.block
        - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
        - ORDERER_GENERAL_LOCALMSPDIR=/etc/hyperledger/msp/orderer/msp
        # TLS
        - ORDERER_GENERAL_TLS_ENABLED=true
        - ORDERER_GENERAL_TLS_PRIVATEKEY=/etc/hyperledger/msp/orderer/tls/server.key
        - ORDERER_GENERAL_TLS_CERTIFICATE=/etc/hyperledger/msp/orderer/tls/server.crt
        - ORDERER_GENERAL_TLS_ROOTCAS=[/etc/hyperledger/msp/orderer/tls/ca.crt]
        # Raft TLS
        - ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE=/etc/hyperledger/msp/orderer/tls/server.crt
        - ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY=/etc/hyperledger/msp/orderer/tls/server.key
        # setting up metrics
        - ORDERER_OPERATIONS_LISTENADDRESS=0.0.0.0:9000
        - ORDERER_OPERATIONS_TLS_ENABLED=false
        - ORDERER_METRICS_ENABLE=true
        - ORDERER_METRICS_PROVIDER=prometheus
        working_dir: /opt/gopath/src/github.com/hyperledger/fabric
        command: orderer
        ports:
        - 8050:7050
        volumes:
        - ./config/:/etc/hyperledger/configtx
        - ./config/crypto-config/ordererOrganizations/example.com/orderers/orderer1.example.com/:/etc/hyperledger/msp/orderer
        - ./config/crypto-config/peerOrganizations/org1.example.com/ca/:/etc/hyperledger/msp/caOrg1
        - ./config/crypto-config/peerOrganizations/org2.example.com/ca/:/etc/hyperledger/msp/caOrg2
        - ./config/crypto-config/ordererOrganizations/example.com/ca/:/etc/hyperledger/msp/caOrderer
        depends_on:
        - ca.org1.example.com
        - ca.org2.example.com

#########
# PEERS #
#########

    peer0.org1.example.com:
        container_name: peer0.org1.example.com
        image: hyperledger/fabric-peer:2.4.3
        environment:
        - FABRIC_LOGGING_SPEC=info
        - CORE_CHAINCODE_LOGGING_LEVEL=INFO
        - CORE_CHAINCODE_LOGGING_SHIM=INFO
        - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
        - CORE_PEER_ID=peer0.org1.example.com
        - CORE_PEER_ENDORSER_ENABLED=true
        - CORE_PEER_LOCALMSPID=Org1MSP
        - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/peer/msp/
        - CORE_PEER_ADDRESS=peer0.org1.example.com:7051
        - CORE_PEER_GOSSIP_USELEADERELECTION=true
        - CORE_PEER_GOSSIP_ORGLEADER=false
        - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org1.example.com:7051
        - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=caliper_default
        # CouchDB
        - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
        - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb.peer0.org1.example.com:5984
        # The CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME and CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD
        # provide the credentials for ledger to connect to CouchDB.  The username and password must
        # match the username and password set for the associated CouchDB.
        - CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=admin
        - CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=adminpw
        # TLS
        - CORE_PEER_TLS_ENABLED=true
        - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/msp/peer/tls/server.key
        - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/msp/peer/tls/server.crt
        - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/msp/peer/tls/ca.crt
        # setting up metrics
        - CORE_OPERATIONS_LISTENADDRESS=0.0.0.0:9000
        - CORE_OPERATIONS_TLS_ENABLED=false
        - CORE_METRICS_ENABLE=true
        - CORE_METRICS_PROVIDER=prometheus
        working_dir: /opt/gopath/src/github.com/hyperledger/fabric
        command: peer node start
        ports:
        - 7051:7051
        volumes:
        - /var/run/:/host/var/run/
        - ./config/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/:/etc/hyperledger/msp/peer
        - ./config/crypto-config/peerOrganizations/org1.example.com/ca/:/etc/hyperledger/msp/caOrg1
        - ./config/crypto-config/peerOrganizations/org2.example.com/ca/:/etc/hyperledger/msp/caOrg2
        - ./config/crypto-config/ordererOrganizations/example.com/ca/:/etc/hyperledger/msp/caOrderer
        depends_on:
        - orderer0.example.com
        - orderer1.example.com
        - couchdb.peer0.org1.example.com

    couchdb.peer0.org1.example.com:
        container_name: couchdb.peer0.org1.example.com
        image: couchdb:3.1.1
        ports:
        - 5984:5984
        # Populate the COUCHDB_USER and COUCHDB_PASSWORD to set an admin user and password
        # for CouchDB.  This will prevent CouchDB from operating in an "Admin Party" mode.
        environment:
        - COUCHDB_USER=admin
        - COUCHDB_PASSWORD=adminpw

    peer0.org2.example.com:
        container_name: peer0.org2.example.com
        image: hyperledger/fabric-peer:2.4.3
        environment:
        - FABRIC_LOGGING_SPEC=info
        - CORE_CHAINCODE_LOGGING_LEVEL=INFO
        - CORE_CHAINCODE_LOGGING_SHIM=INFO
        - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
        - CORE_PEER_ID=peer0.org2.example.com
        - CORE_PEER_ENDORSER_ENABLED=true
        - CORE_PEER_LOCALMSPID=Org2MSP
        - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/peer/msp/
        - CORE_PEER_ADDRESS=peer0.org2.example.com:7051
        - CORE_PEER_GOSSIP_USELEADERELECTION=true
        - CORE_PEER_GOSSIP_ORGLEADER=false
        - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org2.example.com:7051
        - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=caliper_default
        # CouchDB
        - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
        - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb.peer0.org2.example.com:5984
        # The CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME and CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD
        # provide the credentials for ledger to connect to CouchDB.  The username and password must
        # match the username and password set for the associated CouchDB.
        - CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=admin
        - CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=adminpw
        # TLS
        - CORE_PEER_TLS_ENABLED=true
        - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/msp/peer/tls/server.key
        - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/msp/peer/tls/server.crt
        - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/msp/peer/tls/ca.crt
        # setting up metrics
        - CORE_OPERATIONS_LISTENADDRESS=0.0.0.0:9000
        - CORE_OPERATIONS_TLS_ENABLED=false
        - CORE_METRICS_ENABLE=true
        - CORE_METRICS_PROVIDER=prometheus
        working_dir: /opt/gopath/src/github.com/hyperledger/fabric
        command: peer node start
        ports:
        - 8051:7051
        volumes:
        - /var/run/:/host/var/run/
        - ./config/crypto-config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/:/etc/hyperledger/msp/peer
        - ./config/crypto-config/peerOrganizations/org1.example.com/ca/:/etc/hyperledger/msp/caOrg1
        - ./config/crypto-config/peerOrganizations/org2.example.com/ca/:/etc/hyperledger/msp/caOrg2
        - ./config/crypto-config/ordererOrganizations/example.com/ca/:/etc/hyperledger/msp/caOrderer
        depends_on:
        - orderer0.example.com
        - orderer1.example.com
        - couchdb.peer0.org2.example.com

    couchdb.peer0.org2.example.com:
        container_name: couchdb.peer0.org2.example.com
        image: couchdb:3.1.1
        ports:
        - 6984:5984
        # Populate the COUCHDB_USER and COUCHDB_PASSWORD to set an admin user and password
        # for CouchDB.  This will prevent CouchDB from operating in an "Admin Party" mode.
        environment:
        - COUCHDB_USER=admin
        - COUCHDB_PASSWORD=adminpw

##############
# MONITORING #
##############

    prometheus:
        image: prom/prometheus
        container_name: prometheus
        volumes:
        - ./prometheus/prometheus-fabric.yml:/etc/prometheus/prometheus.yml
        - prometheus_data:/prometheus
        command:
        - '--config.file=/etc/prometheus/prometheus.yml'
        - '--storage.tsdb.path=/prometheus'
        - '--web.console.libraries=/usr/share/prometheus/console_libraries'
        - '--web.console.templates=/usr/share/prometheus/consoles'
        ports:
        - "9090:9090"
        depends_on:
          - peer0.org2.example.com
          - peer0.org1.example.com

    pushGateway:
        image: prom/pushgateway
        container_name: pushGateway
        ports:
        - "9091:9091"

    cadvisor:
        image: google/cadvisor
        container_name: cadvisor
        volumes:
        - /var/run:/var/run:rw
        - /sys:/sys:ro
        - /var/lib/docker/:/var/lib/docker:ro
        ports:
        - 8080:8080
        restart: always

###############
# MQTT BROKER #
###############

    mosquitto:
        image: eclipse-mosquitto
        hostname: mosquitto
        container_name: mosquitto
        restart: always
        ports:
        - "1883:1883"
        - "9001:9001"
        volumes:
        - ./mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf